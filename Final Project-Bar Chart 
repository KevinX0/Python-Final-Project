---
title: "30538 Final Project"

author: 

format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---

```{python}
import pandas as pd
import numpy as np
import altair as alt
import pandas as pd
import matplotlib.pyplot as plt
```

```{python}
# File paths
population_data_path = '/Users/hkkkkk/Documents/GitHub/ppha30538_fall2024/student30538/Python-Final-Project/data/Census_with_types.csv'
firedamage_data_path = '/Users/hkkkkk/Documents/GitHub/ppha30538_fall2024/student30538/Python-Final-Project/data/POSTFIRE_MASTER_DATA_SHARE_2064760709534146017.csv'

# Load datasets
population_data = pd.read_csv(population_data_path)
firedamage_data = pd.read_csv(firedamage_data_path)

population_data.head(), firedamage_data.head()

# Standardize the Geography column to remove any variation of "City"
population_data["Geography"] = (
    population_data["Geography"]
    .str.replace(r"\s*City\s*$", "", regex=True, case=False)  # Removes "City" regardless of case
    .str.strip()  # Removes leading/trailing whitespace
)

print(population_data["Geography"].unique()[:10])

population_data.head()

```

```{python}
firedamage_data["* City"] = (
    firedamage_data["* City"]
    .str.replace(r"\s*City\s*$", "", regex=True, case=False)  
    .str.strip()  
)

firedamage_data["* City"].unique()[:10]  
firedamage_data.head()
```

```{python}
# Remove rows where Geography or * City contains "County" in either dataset
population_data_cleaned = population_data[~population_data["Geography"].str.contains("County", case=False, na=False)]
firedamage_data_cleaned = firedamage_data[~firedamage_data["* City"].str.contains("County", case=False, na=False)]

# Standardize column names for merging
population_data_cleaned = population_data_cleaned.rename(columns={"Geography": "City"})
firedamage_data_cleaned = firedamage_data_cleaned.rename(columns={"* City": "City"})

# Merge the datasets based on the City column
merged_data = pd.merge(
    firedamage_data_cleaned,
    population_data_cleaned,
    on="City",
    how="inner"
)

# Display the first few rows of the merged dataset to confirm
merged_data.head()
```

# bar plot of 2020 
```{python}
# Filter for 2020 data only after merging
merged_data["Year"] = pd.to_datetime(merged_data["Incident Start Date"], errors="coerce").dt.year
merged_data_2020 = merged_data[merged_data["Year"] == 2020]
```

```{python}
# Filter for 2020 data only after merging and exclude "No Damage"
merged_data["Year"] = pd.to_datetime(merged_data["Incident Start Date"], errors="coerce").dt.year
merged_data_2020 = merged_data[
    (merged_data["Year"] == 2020) &
    (merged_data["* Damage"] != "No Damage")
]

# Group data by geographic type and damage level, and count occurrences
damage_counts_2020 = (
    merged_data_2020.groupby(["geographic type", "* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
damage_counts_2020["* Damage"] = pd.Categorical(
    damage_counts_2020["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Geographic Type and Damage Level
damage_counts_2020 = damage_counts_2020.sort_values(by=["geographic type", "* Damage"])

# Create a new x-axis label with rearranged categories
damage_counts_2020["Label"] = (
    damage_counts_2020["geographic type"] + " + " + damage_counts_2020["* Damage"].astype(str)
)

# Assign colors based on geographic type
colors = {"Rural": "green", "Suburban": "orange", "Urban": "red"}
damage_counts_2020["Bar Color"] = damage_counts_2020["geographic type"].map(colors)

# Plot the bar chart
plt.figure(figsize=(14, 8))
bars = plt.bar(
    damage_counts_2020["Label"],
    damage_counts_2020["Count"],
    color=damage_counts_2020["Bar Color"],
)

# Add counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.5, int(yval), ha="center", va="bottom", fontsize=10)

# Customize the chart
plt.title("Fire Damage Counts by Geographic Type and Damage Level (2020, Excluding No Damage)", fontsize=16)
plt.xlabel("Geographic Type + Damage Level", fontsize=12)
plt.ylabel("Counts", fontsize=12)
plt.xticks(rotation=45, ha="right", fontsize=10)

# Add a legend for the bar colors
from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], color="green", lw=6, label="Rural"),
    Line2D([0], [0], color="orange", lw=6, label="Suburban"),
    Line2D([0], [0], color="red", lw=6, label="Urban"),
]

plt.legend(handles=legend_elements, title="Geographic Type", loc="upper right", fontsize=10)

plt.tight_layout()

# Show the plot
plt.show()


```
# plot of 2021

```{python}
# Filter for 2021 data only after merging
merged_data_2021 = merged_data[
    (merged_data["Year"] == 2021) & 
    (~merged_data["* Damage"].isna()) & 
    (~merged_data["geographic type"].isna())
].copy()

# Verify that there are no NaN values remaining
print("NaN values in geographic type:", merged_data_2021["geographic type"].isna().sum())
print("NaN values in * Damage:", merged_data_2021["* Damage"].isna().sum())

```
```{python}
# Filter for 2021 data only after merging and exclude "No Damage"
merged_data_2021 = merged_data[
    (merged_data["Year"] == 2021) &
    (merged_data["* Damage"] != "No Damage")
]

# Group data by geographic type and damage level, and count occurrences
damage_counts_2021 = (
    merged_data_2021.groupby(["geographic type", "* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
damage_counts_2021["* Damage"] = pd.Categorical(
    damage_counts_2021["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Geographic Type and Damage Level
damage_counts_2021 = damage_counts_2021.sort_values(by=["geographic type", "* Damage"])

# Create a new x-axis label with rearranged categories
damage_counts_2021["Label"] = (
    damage_counts_2021["geographic type"] + " + " + damage_counts_2021["* Damage"].astype(str)
)

# Assign colors based on geographic type
colors = {"Rural": "green", "Suburban": "orange", "Urban": "red"}
damage_counts_2021["Bar Color"] = damage_counts_2021["geographic type"].map(colors)

# Plot the bar chart
plt.figure(figsize=(14, 8))
bars = plt.bar(
    damage_counts_2021["Label"],
    damage_counts_2021["Count"],
    color=damage_counts_2021["Bar Color"],
)

# Add counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.5, int(yval), ha="center", va="bottom", fontsize=10)

# Customize the chart
plt.title("Fire Damage Counts by Geographic Type and Damage Level (2021, Excluding No Damage)", fontsize=16)
plt.xlabel("Geographic Type + Damage Level", fontsize=12)
plt.ylabel("Counts", fontsize=12)
plt.xticks(rotation=45, ha="right", fontsize=10)

# Add a legend for the bar colors
from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], color="green", lw=6, label="Rural"),
    Line2D([0], [0], color="orange", lw=6, label="Suburban"),
    Line2D([0], [0], color="red", lw=6, label="Urban"),
]

plt.legend(handles=legend_elements, title="Geographic Type", loc="upper right", fontsize=10)

plt.tight_layout()

# Show the plot
plt.show()


```
# plot of 2022

```{python}
# Filter for 2022 data only after merging
merged_data["Year"] = pd.to_datetime(merged_data["Incident Start Date"], errors="coerce").dt.year
merged_data_2022 = merged_data[merged_data["Year"] == 2022]
```

```{python}
# Filter for 2022 data only after merging and exclude "No Damage"
merged_data_2022 = merged_data[
    (merged_data["Year"] == 2022) &
    (merged_data["* Damage"] != "No Damage")
]

# Group data by geographic type and damage level, and count occurrences
damage_counts_2022 = (
    merged_data_2022.groupby(["geographic type", "* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
damage_counts_2022["* Damage"] = pd.Categorical(
    damage_counts_2022["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Geographic Type and Damage Level
damage_counts_2022 = damage_counts_2022.sort_values(by=["geographic type", "* Damage"])

# Create a new x-axis label with rearranged categories
damage_counts_2022["Label"] = (
    damage_counts_2022["geographic type"] + " + " + damage_counts_2022["* Damage"].astype(str)
)

# Assign colors based on geographic type
colors = {"Rural": "green", "Suburban": "orange", "Urban": "red"}
damage_counts_2022["Bar Color"] = damage_counts_2022["geographic type"].map(colors)

# Plot the bar chart
plt.figure(figsize=(14, 8))
bars = plt.bar(
    damage_counts_2022["Label"],
    damage_counts_2022["Count"],
    color=damage_counts_2022["Bar Color"],
)

# Add counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.5, int(yval), ha="center", va="bottom", fontsize=10)

# Customize the chart
plt.title("Fire Damage Counts by Geographic Type and Damage Level (2022, Excluding No Damage)", fontsize=16)
plt.xlabel("Geographic Type + Damage Level", fontsize=12)
plt.ylabel("Counts", fontsize=12)
plt.xticks(rotation=45, ha="right", fontsize=10)

# Add a legend for the bar colors
from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], color="green", lw=6, label="Rural"),
    Line2D([0], [0], color="orange", lw=6, label="Suburban"),
    Line2D([0], [0], color="red", lw=6, label="Urban"),
]

plt.legend(handles=legend_elements, title="Geographic Type", loc="upper right", fontsize=10)

plt.tight_layout()

# Show the plot
plt.show()

```
# plot of 2023

```{python}
# Filter for 2023 data only after merging
merged_data["Year"] = pd.to_datetime(merged_data["Incident Start Date"], errors="coerce").dt.year
merged_data_2023 = merged_data[merged_data["Year"] == 2023]
```


```{python}
# Filter for 2023 data only after merging and exclude "No Damage"
merged_data_2023 = merged_data[
    (merged_data["Year"] == 2023) &
    (merged_data["* Damage"] != "No Damage")
]

# Group data by geographic type and damage level, and count occurrences
damage_counts_2023 = (
    merged_data_2023.groupby(["geographic type", "* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
damage_counts_2023["* Damage"] = pd.Categorical(
    damage_counts_2023["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Geographic Type and Damage Level
damage_counts_2023 = damage_counts_2023.sort_values(by=["geographic type", "* Damage"])

# Create a new x-axis label with rearranged categories
damage_counts_2023["Label"] = (
    damage_counts_2023["geographic type"] + " + " + damage_counts_2023["* Damage"].astype(str)
)

# Assign colors based on geographic type
colors = {"Rural": "green", "Suburban": "orange", "Urban": "red"}
damage_counts_2023["Bar Color"] = damage_counts_2023["geographic type"].map(colors)

# Plot the bar chart
plt.figure(figsize=(14, 8))
bars = plt.bar(
    damage_counts_2023["Label"],
    damage_counts_2023["Count"],
    color=damage_counts_2023["Bar Color"],
)

# Add counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.5, int(yval), ha="center", va="bottom", fontsize=10)

# Customize the chart
plt.title("Fire Damage Counts by Geographic Type and Damage Level (2023, Excluding No Damage)", fontsize=16)
plt.xlabel("Geographic Type + Damage Level", fontsize=12)
plt.ylabel("Counts", fontsize=12)
plt.xticks(rotation=45, ha="right", fontsize=10)

# Add a legend for the bar colors
from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], color="green", lw=6, label="Rural"),
    Line2D([0], [0], color="orange", lw=6, label="Suburban"),
    Line2D([0], [0], color="red", lw=6, label="Urban"),
]

plt.legend(handles=legend_elements, title="Geographic Type", loc="upper right", fontsize=10)

plt.tight_layout()

# Show the plot
plt.show()

```
# plot for 2020-2023

```{python}
merged_data["Year"] = pd.to_datetime(merged_data["Incident Start Date"], errors="coerce").dt.year
merged_data_total = merged_data[(merged_data["Year"] >= 2020) & (merged_data["Year"] <= 2023)]

# Group data by geographic type and damage level for 2020-2023 combined and sum counts
damage_counts_total = (
    merged_data_total.groupby(["geographic type", "* Damage"])
    .size()
    .reset_index(name="Count")
)
```

```{python}
# Filter for 2020-2023 data and exclude "No Damage"
merged_data_total = merged_data[
    (merged_data["Year"] >= 2020) & 
    (merged_data["Year"] <= 2023) &
    (merged_data["* Damage"] != "No Damage")
]

# Group data by geographic type and damage level, and count occurrences
damage_counts_total = (
    merged_data_total.groupby(["geographic type", "* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
damage_counts_total["* Damage"] = pd.Categorical(
    damage_counts_total["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Geographic Type and Damage Level
damage_counts_total = damage_counts_total.sort_values(by=["geographic type", "* Damage"])

# Create a new x-axis label with rearranged categories
damage_counts_total["Label"] = (
    damage_counts_total["geographic type"] + " + " + damage_counts_total["* Damage"].astype(str)
)

# Assign colors based on geographic type
colors = {"Rural": "green", "Suburban": "orange", "Urban": "red"}
damage_counts_total["Bar Color"] = damage_counts_total["geographic type"].map(colors)

# Plot the bar chart
plt.figure(figsize=(14, 8))
bars = plt.bar(
    damage_counts_total["Label"],
    damage_counts_total["Count"],
    color=damage_counts_total["Bar Color"],
)

# Add counts on top of each bar
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width() / 2, yval + 0.5, int(yval), ha="center", va="bottom", fontsize=10)

# Customize the chart
plt.title("Fire Damage Counts by Geographic Type and Damage Level (2020-2023 Total, Excluding No Damage)", fontsize=16)
plt.xlabel("Geographic Type + Damage Level", fontsize=12)
plt.ylabel("Counts", fontsize=12)
plt.xticks(rotation=45, ha="right", fontsize=10)

# Add a legend for the bar colors
from matplotlib.lines import Line2D

legend_elements = [
    Line2D([0], [0], color="green", lw=6, label="Rural"),
    Line2D([0], [0], color="orange", lw=6, label="Suburban"),
    Line2D([0], [0], color="red", lw=6, label="Urban"),
]

plt.legend(handles=legend_elements, title="Geographic Type", loc="upper right", fontsize=10)

plt.tight_layout()

# Show the plot
plt.show()

```
# pie chart for rural

```{python}
## Plot the pie chart with larger text size
plt.figure(figsize=(8, 8))
plt.pie(
    rural_damage_counts["Count"],
    labels=rural_damage_counts["* Damage"],
    autopct='%1.1f%%',
    startangle=140,
    colors=["yellowgreen", "gold", "orange", "red"],
    textprops={'fontsize': 16}  # Set text size for labels and percentages
)

# Customize the chart
plt.title("Proportion of Damage Levels in Rural Areas (2020-2023, Excluding No Damage)", fontsize=18)  # Increase title font size
plt.tight_layout()

# Show the plot
plt.show()

```

# pie chart for suburban
```{python}
# Filter data for 2020-2023, suburban geographic type, and exclude NaN and "No Damage"
merged_data_suburban = merged_data[
    (merged_data["Year"] >= 2020) & 
    (merged_data["Year"] <= 2023) &
    (merged_data["geographic type"] == "Suburban") &
    (~merged_data["* Damage"].isna()) & 
    (merged_data["* Damage"] != "No Damage")
].copy()

# Group data by damage level and calculate counts for suburban areas
suburban_damage_counts = (
    merged_data_suburban.groupby(["* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
suburban_damage_counts["* Damage"] = pd.Categorical(
    suburban_damage_counts["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Damage Level
suburban_damage_counts = suburban_damage_counts.sort_values(by="* Damage")

# Plot the pie chart with larger text size
plt.figure(figsize=(8, 8))
plt.pie(
    suburban_damage_counts["Count"],
    labels=suburban_damage_counts["* Damage"],
    autopct='%1.1f%%',
    startangle=140,
    colors=["yellowgreen", "gold", "orange", "red"],
    textprops={'fontsize': 16}  # Set text size for labels and percentages
)

# Customize the chart
plt.title("Proportion of Damage Levels in Suburban Areas (2020-2023, Excluding No Damage)", fontsize=18)  # Increase title font size
plt.tight_layout()

# Show the plot
plt.show()


```

# pie chart for urban
```{python}
# Filter data for 2020-2023, urban geographic type, and exclude NaN and "No Damage"
merged_data_urban = merged_data[
    (merged_data["Year"] >= 2020) & 
    (merged_data["Year"] <= 2023) &
    (merged_data["geographic type"] == "Urban") &
    (~merged_data["* Damage"].isna()) & 
    (merged_data["* Damage"] != "No Damage")
].copy()

# Group data by damage level and calculate counts for urban areas
urban_damage_counts = (
    merged_data_urban.groupby(["* Damage"])
    .size()
    .reset_index(name="Count")
)

# Define the order of damage levels
damage_order = [
    "Affected (1-9%)", 
    "Minor (10-25%)", 
    "Major (26-50%)", 
    "Destroyed (>50%)"
]

# Update damage levels for sorting and visualization
urban_damage_counts["* Damage"] = pd.Categorical(
    urban_damage_counts["* Damage"], categories=damage_order, ordered=True
)

# Sort the data by Damage Level
urban_damage_counts = urban_damage_counts.sort_values(by="* Damage")

# Plot the pie chart with larger text size
plt.figure(figsize=(8, 8))
plt.pie(
    urban_damage_counts["Count"],
    labels=urban_damage_counts["* Damage"],
    autopct='%1.1f%%',
    startangle=140,
    colors=["yellowgreen", "gold", "orange", "red"],
    textprops={'fontsize': 16}  # Set text size for labels and percentages
)

# Customize the chart
plt.title("Proportion of Damage Levels in Urban Areas (2020-2023, Excluding No Damage)", fontsize=18)  # Increase title font size
plt.tight_layout()

# Show the plot
plt.show()


```

# pie chart for destory
```{python}
# Plot the pie chart with larger text size
plt.figure(figsize=(8, 8))
plt.pie(
    destroyed_counts["Count"],
    labels=destroyed_counts["geographic type"],
    autopct='%1.1f%%',
    startangle=140,
    colors=["green", "orange", "red"],
    textprops={'fontsize': 18}  # Set text size for labels and percentages
)

# Customize the chart
plt.title("Proportion of Geographic Types in Destroyed Damage Level (2020-2023)", fontsize=18)  # Increase title font size
plt.tight_layout()

# Show the plot
plt.show()

```